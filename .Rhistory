} else if (n == 1) {
return(2^k-1)
}
else {
sum <- 0
for(j in 1:(k-n+1)) {
sum = sum + choose(k, j) * recursivePump(k-j, n-1)
j = j + 1
}
return(s)
}
}
assignments <- recursivePump(15, 8)
#find assignments of k pumps to n tanks
recursivePump <- function(k, n) {
if ((k <= n) && (k >= 1)) {
return(0)
} else if (k == n) {
return(factorial(k))
} else if (n == 1) {
return(2^k-1)
}
else {
sum <- 0
for(j in 1:(k-n+1)) {
sum = sum + choose(k, j) * recursivePump(k-j, n-1)
j = j + 1
}
return(sum)
}
}
assignments <- recursivePump(15, 8)
assignments <- recursivePump(15, 8)
processTime <- assignments / 1000000 / 60 / 60 / 24 / 365
processTime
---------
---------
---------
---------
---------
---------
---------
knitr::include_graphics("tripleVen.png")
knitr::include_graphics("/tripleVen.png")
include_graphics(tripleVen.png)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(png)
include_graphics(tripleVen.png)
include_graphics(tripleVen.png)
include_graphics(tripleVen.png)
include_graphics(tripleVen.png)
include_graphics(\tripleVen.png)
include_graphics(/tripleVen.png)
include_graphics("tripleVen.png")
include_graphics("tripleVen.png")
include_graphics("tripleVen.png")
dbinom(4, size=12, prob=0.2)
dbinom(61, size=1000, prob=.07)
dbinom(61, size=61, prob=.07)
dbinom(61, size=61, prob=.95)
dbinom(61, size=1000, prob=.95)
dbinom(61, size=1000, prob=.06)
dbinom(61, size=1000, prob=.05)
dbinom(60, size=1000, prob=.05)
dbinom(60, size=1000, prob=.07)
dbinom(61, size=1000, prob=.07)
dbinom(61, size=1000, prob=.93)
dbinom(61, size=61, prob=.93)
1 - dbinom(61, size=1000, prob=.93)
library(readr)
chickadee <- read_delim("Desktop/Storage/Cornell/Sophomore Spring 2020/BIOG 1500/Statistics/chickadee.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(chickadee)
shapiro.test(femalewing)
shapiro.test(femaleweight)
chickadee <- read_delim("Desktop/Storage/Cornell/Sophomore Spring 2020/BIOG 1500/Statistics/chickadee.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
malewing <- chickadee$malewing
femalewing <- chickadee$femalewing
maleweight <- chickadee$maleweight
femaleweight <- chickadee$femaleweight
#Question 3
shapiro.test(femalewing)
shapiro.test(femaleweight)
#Question 3
shapiro.test(maleweight)
plot(femaleweight, femalewing)
plot(femaleweight, femalewing, pch = 21, bg = "red", cex = 1.5)
abline(lsfit(femaleweight, femalewing))
cor.test(femaleweight, femalewing, method="spearman")
cor.test(maleweight, malewing, method="spearman")
plot(maleweight, malewing, pch = 21, bg = "red", cex = 1.5)
abline(lsfit(maleweight, malewing))
cor.test(femaleweight, femalewing, method="spearman")
plot(femaleweight, femalewing, pch = 21, bg = "red", cex = 1.5)
abline(lsfit(femaleweight, femalewing))
MeanMaleWeight <- mean(maleweight)
MeanFemaleWeight <- mean(femaleweight)
sdMaleWeight <- sd(maleweight)
sdFemaleWeight <- sd(femaleweight)
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = c("Male", "Female"))
meanWeight <- c(mean(maleweight), mean(femaleweight))
sdWeight <- c(sd(maleweight), sd(femaleweight))
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = c("Male", "Female"))
meanWeight <- c(mean(maleweight), mean(femaleweight))
sdWeight <- c(sd(maleweight), sd(femaleweight))
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = "Chickadees", names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
meanWeight <- c(mean(maleweight), mean(femaleweight))
sdWeight <- c(sd(maleweight), sd(femaleweight))
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = "Chickadees", ylim = c(0, 12), names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = "Chickadees", ylim = c(0, 13), names.arg = c("Male", "Female"))
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = "Chickadees", ylim = c(0, 14), names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = "Chickadees", ylim = c(0, 13), names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
(0, 14), names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
(0, 14), names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = "Chickadees", ylim = c(0, 14), names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=6, length=0.1 )
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=2, length=0.1 )
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=1, length=0.1 )
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=0, length=0.1 )
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
meanWeight <- c(mean(maleweight), mean(femaleweight))
sdWeight <- c(sd(maleweight), sd(femaleweight))
barplotWeight <- barplot(meanWeight, beside=T, col=c("red", "blue"), legend = T, ylab = "Chickadee Weight (grams)", xlab = "Chickadees", ylim = c(0, 14), names.arg = c("Male", "Female"))
arrows(barplotWeight, (meanWeight + sdWeight), barplotWeight, (meanWeight - sdWeight), angle=90, code=3, length=0.1 )
#Question 5
t.test(maleweight, femaleweight)
library(readxl)
library(httr)
cd(Desktop/Strorage/Research/Computational/R/COVID19)
swd(Desktop/Storage/Research/Computational/R/COVID19)
getwd()
setwd(Desktop/Storage/Research/Computational/R/COVID19)
setwd("~/Desktop")
setwd()
setwd(/)
setwd(~)
setwd(~/)
setwd(..)
setwd(Storage)
setwd(/Storage)
setwd(~/Storage)
setwd("Storage")
setwd("Research/Computational/R/COVID19")
dir.create(scripts)
dir.create("scripts")
scripts
source("scripts/getCases.R")
COVID
View(COVID)
library(tidyverse)
#
USA <- COVID %>% filter('Countries and territories' == 'United_States_of_America')
USA
#
USA <- COVID %>% filter(Geold == "US")
#
USA <- COVID %>% filter("Geold" == "US")
USA
#
USA <- COVID %>% filter("Geold" == US)
COVID %>% rename("Countries and territories" = Countries)
COVID %>% rename("Countries and territories" = 'Countries')
COVID %>% rename('Countries and territories' = 'Countries')
COVID <- make.names(COVID)
COVID
names(COVID)[names(COVID) == 'Countries and territories'] <- 'Countries'
COVID
source('~/Desktop/Storage/Research/Computational/R/COVID19/scripts/getCases.R')
COVID
#
USA <- COVID %>% filter('Countries' == 'United_States_of_America')
USA
#
COVID <- as_tibble(COVID)
USA <- COVID %>% filter('Countries' == 'United_States_of_America')
USA
USA <- filter(COVID, 'Countries' == 'United_States_of_America')
USA
USA <- filter(COVID, Countries == 'United_States_of_America')
USA
ggplot(USA) + geom_dotplot(mapping = aes(x = DateRep, y = Cases))
ggplot(USA) + geom_dotplot(mapping = aes(x = Day, y = Cases))
ggplot(data = USA) + geom_dotplot(mapping = aes(x = Day, y = Cases))
ggplot(data = USA) + geom_point(mapping = aes(x = Day, y = Cases))
ggplot(data = USA) + geom_point(mapping = aes(x = DateRep, y = Cases))
ggplot(data = USA) + geom_point(mapping = aes(x = DateRep, y = cumsum(Cases)))
ggplot(data = USA) + geom_point(mapping = aes(x = DateRep, y = rcumsum(Cases)))
ggplot(data = USA) + geom_point(mapping = aes(x = DateRep, y = cumsum(Cases)))
ggplot(data = USA) + geom_point(mapping = aes(x = DateRep, y = (cumsum(Cases) - Cases)))
cumsum(Cases)
cumsum(USA$Cases)
USA <- COVID %>% filter(Countries == 'United_States_of_America') %>% sort(DateRep)
USA <- COVID %>% filter(Countries == 'United_States_of_America') %>% arrange(DateRep)
USA
ggplot(data = USA) + geom_point(mapping = aes(x = DateRep, y = cumsum(Cases)))
ggplot(data = USA) + geom_point(mapping = aes(x = DateRep, y = cumsum(Cases))) + geom_line()
ggplot(data = USA, mapping = aes(x = DateRep, y = cumsum(Cases))) + geom_point() + geom_line()
ggplot(data = USA, mapping = aes(x = DateRep, y = cumsum(Cases))) + geom_line()
test <- COVID %>% arrange(DateRep)
test
unique(test$GeoId)
#
GeoId <- unique(COVID$GeoId)
for(i in 1:length(ID)){
ID[i] <- filter(COVID, GeoId == ID[i])
}
#
ID <- unique(COVID$GeoId)
for(i in 1:length(ID)){
ID[i] <- filter(COVID, GeoId == ID[i])
}
warnings()
source('~/Desktop/Storage/Research/Computational/R/COVID19/scripts/getCases.R')
USA <- COVID %>% filter(Countries == 'United_States_of_America') %>% arrange(DateRep)
caseSums <- USA %>% arrange(DateRep) %>% cumsum(Cases)
tempCountry <- COVID %>% filter(GeoId == 1) %>% arrange(DateRep)
temp
tempCountry
tempCountry <- COVID %>% filter(GeoId == ID[1]) %>% arrange(DateRep)
tempCountry
#
COVID <- as_tibble(COVID)
tempCountry <- COVID %>% filter(GeoId == ID[1]) %>% arrange(DateRep)
tempCountry
tempCountry <- filter(COVID, GeoId == ID[1])
tempCountry
USA <- COVID %>% filter(GeoId == 'US')
USA
View(USA)
View(USA)
source('~/Desktop/Storage/Research/Computational/R/COVID19/scripts/getCases.R')
#
COVID <- as_tibble(COVID)
USA <- COVID %>% filter(GeoId == 'US')
#
ID <- unique(COVID$GeoId)
temp <- COVID %>% filter(GeoId == ID[4])
temp
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(GeoId == ID[i])
}
tempCountry
tempCountry <- tempCountry %>% arrange(DateRep)
for(i in 1:6){
tempCountry <- COVID %>% filter(GeoId == ID[i])
tempCountry <- tempCountry %>% arrange(DateRep)
}
tempCountry
tempCountry <- cumsum(tempCountry$Cases)
for(i in 1:6){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry <- cumsum(tempCountry$Cases)
}
for(i in 1:6){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
caseSum <- cumsum(tempCountry$Cases)
}
caseSum
for(i in 1:6){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$Cases)
}
tempCountry
dim(tempCountry)
x <- dim(tempCountry)
x[1]
caseSum <- []
caseSum <- data.frame()
for(i in 1:6){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$Cases)
casesum <- rbind(caseSum, tempCountry)
}
caseSum
for(i in 1:6){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$Cases)
caseSum <- rbind(caseSum, tempCountry)
}
caseSum
for(i in 1:length[ID]){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$Cases)
caseSum <- rbind(caseSum, tempCountry)
}
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$Cases)
caseSum <- rbind(caseSum, tempCountry)
}
caseSum
ggplot(data = caseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId) + geom_line()
)
ggplot(data = caseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId)) + geom_line()
recentCaseSum <- filter(caseSum, Month == c(2, 3))
recentCaseSum <- filter(caseSum, Month %in% c(2, 3))
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId)) + geom_line()
recentCaseSum <- filter(caseSum, Month == 3))
recentCaseSum <- filter(caseSum, Month == 3)
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId)) + geom_line()
library(gghighlight)
install.packages(gghighlight)
devtools::install_github("yutannihilation/gghighlight")
library(gghighlight)
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId)) + geom_line() + gghighlight(GeoId == 'US')
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId)) + geom_line() + gghighlight(GeoId == 'US', color = 'red')
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == 'US')
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT', 'GB', 'KR'))
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT'))
ggplot(data = CaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT'))
ggplot(data = caseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT'))
source('~/.active-rstudio-document')
ggplot(data = recentCaseSum, mapping = aes(x = DateRep, y = totalCases, group = GeoId)) + geom_line()
source(exploreCOVIDCases.R)
source(scripts/exploreCOVIDCases.R)
source('scripts/exploreCOVIDCases.R)
''
)
source('scripts/exploreCOVIDCases.R')
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100)
post100
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100)
normalizedDate <- data.frame()
for(i in 1:length(ID)){
temp100 <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
temp100[, timeSince] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
1
for(i in 1:length(ID)){
temp100 <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
normalizedDate
for(i in 1:length(ID)){
temp100 <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- difftime(temp100$DateRep, temp100$DateRep[length(temp100)], units = "days")
normalizedDate <- rbind(normalizedDate, temp100)
}
normalizedDate
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100)
post100
normalizedDate <- data.frame()
for(i in 1:length(ID)){
temp100 <- post100 %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- difftime(temp100$DateRep, temp100$DateRep[length(temp100)], units = "days")
normalizedDate <- rbind(normalizedDate, temp100)
}
normalizedDate
View(normalizedDate)
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100)
normalizedDate <- data.frame()
for(i in 1:length(ID)){
temp100 <- post100 %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
post100
View(post100)
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100) %>% arrange(DateRep)
normalizedDate <- data.frame()
for(i in 1:length(ID)){
temp100 <- ilter(post100, GeoId == ID[i])
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100) %>% arrange(DateRep)
normalizedDate <- data.frame()
for(i in 1:length(ID)){
temp100 <- filter(post100, GeoId == ID[i])
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
for(i in 1:length(ID)){
temp100 <- filter(post100, GeoId == ID[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
te p100
temp100
#read the dataset sheet into R
COVID <- read_excel(tf)
source('~/Desktop/Storage/Research/Computational/R/COVID-19/scripts/getCases.R')
#Mapping US only curve
COVID <- as_tibble(COVID)
#Generate cumulative case sum datset
ID <- unique(COVID$GeoId)
caseSum <- data.frame()
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$Cases)
caseSum <- rbind(caseSum, tempCountry)
}
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100)
normalizedDate <- data.frame()
for(i in 1:length(ID)){
temp100 <- filter(post100, GeoId == ID[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
for(i in 1:5){
temp100 <- filter(post100, GeoId == ID[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[length(temp100)]
normalizedDate <- rbind(normalizedDate, temp100)
}
temp100
temp100 <- filter(post100, GeoId == ID[i])
temp100
temp100 <- filter(post100, GeoId == ID[3])
temp100
ID100 <- unique(post100)
ID100
ID100 <- unique(post100$GeoId)
ID100
temp100 <- filter(post100, GeoId == ID100[6]) %>% arrange(DateRep)
temp100
temp100[, "timeSince"] <- temp100$DateRep - temp100$DateRep[1]
temp100
temp100[, "timeSince"] <- difftime(temp100$DateRep, temp100$DateRep[1], units = "days")
temp100
#Normalize curve start dates
post100 <- filter(caseSum, totalCases >= 100)
ID100 <- unique(post100$GeoId)
normalizedDate <- data.frame()
for(i in 1:5){
temp100 <- filter(post100, GeoId == ID100[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- difftime(temp100$DateRep, temp100$DateRep[1], units = "days")
normalizedDate <- rbind(normalizedDate, temp100)
}
for(i in 1:length(ID100)){
temp100 <- filter(post100, GeoId == ID100[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- difftime(temp100$DateRep, temp100$DateRep[1], units = "days")
normalizedDate <- rbind(normalizedDate, temp100)
}
normalizedDate <- data.frame()
for(i in 1:length(ID100)){
temp100 <- filter(post100, GeoId == ID100[i]) %>% arrange(DateRep)
temp100[, "timeSince"] <- difftime(temp100$DateRep, temp100$DateRep[1], units = "days")
normalizedDate <- rbind(normalizedDate, temp100)
}
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId)) + geom_line()
ggplot(data = normalizedDate, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + xlim(30)
ggplot(data = normalizedDate, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + xlim(0, 30)
ggplot(data = normalizedDate, mapping = aes(x = DateRep, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + xlim(0, 30)
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + xlim(0, 30)
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x) + xlim(0, 30)
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x)) + xlim(0, 30)
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x)) + xlim(0, 30)
library(scales)
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x)) + xlim(0, 30)
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x)) + xlim(0, 30) + annotation_logticks()
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x)) + xlim(0, 30) + annotation_logticks(sides="l")
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + coord_trans(y="log10") + xlim(0, 30) + annotation_logticks(sides="l")
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = c(100, 1000, 10000, 100000)) + xlim(0, 30) + annotation_logticks(sides="l") +
.
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = c(100, 1000, 10000, 100000)) + xlim(0, 30) + annotation_logticks(sides="l") + xlim(0, 30)
#Plot COVID-19 case total by country starting at 100 cases
ggplot(data = normalizedDate, mapping = aes(x = timeSince, y = totalCases, group = GeoId, color = GeoId)) + geom_line() + gghighlight(GeoId == c('US', 'ES', 'IT')) + scale_y_log10(breaks = c(100, 1000, 10000, 100000)) + xlim(0, 30) + annotation_logticks(sides="l") + xlim(0, 30) + theme_bw()
install.packages(here)
install.packages("here")
library(here)
getwd()
setwd("../Desktop")
setwd(".../Desktop")
setwd("./Desktop")
setwd("~")
getwd()
setwd("Desktop/Storage/Research/Computational/R/COVID-19")
getwd()
ggsave(20200321CasePlot, plot = last_plot())
ggsave("20200321CasePlot", plot = last_plot())
ggsave("20200321CasePlot.png")
ggsave(here("images", "20200321CasePlot.png"))
here("figures")
here()
getwd()
here(getwd())
here()
here()
ggsave(here("figures", "20200321CasePlot.png"))
set_here(getwd())
here()
dr_here()
setwd(getwd())
getwd()
here()
