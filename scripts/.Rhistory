#Generate cumulative case and death sum datset
ID <- unique(COVID$GeoId)
caseSum <- data.frame()
deathSum <- data.frame()
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$Cases)
caseSum <- rbind(caseSum, tempCountry)
}
for(i in 1:length(ID)){
tempCountry <- caseSum %>% filter(GeoId == ID[i]) %>% arrange(DateRep)
tempCountry[, "totalDeaths"] <- cumsum(tempCountry$Deaths)
deathSum <- rbind(deathSum, tempCountry)
}
COVID <- deathSum
#
ggplot(data = COVID, mapping = aes(x = totalCases, y = Deaths)) + geom_point()
#
ggplot(data = COVID, mapping = aes(x = totalCases, y = totalDeaths)) + geom_point()
#
ggplot(data = COVID, mapping = aes(x = totalCases, y = totalDeaths, color = DateRep)) + geom_point()
#
ggplot(data = COVID, mapping = aes(x = max(totalCases), y = max(totalDeaths), color = DateRep)) + geom_point()
View(COVID)
currentCOVID <- filter(COVID, DateRep == "2020-03-24")
currentCOVID <- filter(COVID, DateRep == "2020-03-23")
currentCOVID <- filter(COVID, DateRep == 2020-03-23)
currentCOVID <- filter(COVID, DateRep = 2020-03-23)
View(COVID)
currentCOVID <- filter(COVID, DateRep == "2020-03-24")
currentCOVID
currentCOVID <- filter(COVID, DateRep == as.date("2020-03-24"))
library(lubridate)
library(lubridate)
currentCOVID <- filter(COVID, DateRep == as.date("2020-03-24"))
currentCOVID <- filter(COVID, DateRep == as.Date("2020-03-24"))
#
ggplot(data = currentCOVID, mapping = aes(x = totalCases, y = totalDeaths, color = DateRep)) + geom_point()
currentCOVID <- filter(COVID, (DateRep == as.Date("2020-03-24")) & (totalDeaths >= 1) & (totalCases >= 1))
#
ggplot(data = currentCOVID, mapping = aes(x = totalCases, y = totalDeaths, color = DateRep)) +
geom_point() +
scale_y_log10(breaks = c(1, 10, 100, 1000, 10000), limits = c(1, 10000)) +
scale_x_log10(breaks = c(1, 10, 100, 1000, 10000, 100000), limits = c(1, 100000)) +
annotation_logticks(sides="lb")
#
ggplot(data = currentCOVID, mapping = aes(x = Cases, y = totalCases, color = DateRep)) +
geom_point() +
scale_y_log10(breaks = c(1, 10, 100, 1000, 10000), limits = c(1, 10000)) +
annotation_logticks(sides="l")
logCOVID <- filter(COVID, (totalDeaths >= 1) & (totalCases >= 1))
#
ggplot(data = logCOVID, mapping = aes(x = Cases, y = totalCases, color = DateRep)) +
geom_point() +
scale_y_log10(breaks = c(1, 10, 100, 1000, 10000), limits = c(1, 10000)) +
annotation_logticks(sides="l")
#
ggplot(data = logCOVID, mapping = aes(x = Cases, y = totalCases, color = DateRep)) +
geom_point() +
scale_y_log10(breaks = c(1, 10, 100, 1000, 10000, 100000), limits = c(1, 100000)) +
annotation_logticks(sides="l")
#
ggplot(data = logCOVID, mapping = aes(x = Cases, y = totalCases, color = DateRep)) +
geom_point() +
scale_y_log10(breaks = c(1, 10, 100, 1000, 10000, 100000), limits = c(1, 100000)) +
annotation_logticks(sides="l") +
transition_time(DateRep)
library(gifski)
#
ggplot(data = logCOVID, mapping = aes(x = Cases, y = totalCases, color = DateRep)) +
geom_point() +
scale_y_log10(breaks = c(1, 10, 100, 1000, 10000, 100000), limits = c(1, 100000)) +
annotation_logticks(sides="l") +
transition_time(DateRep >= as.Date("2020-02-01"))
#
plot <- ggplot(data = logCOVID, mapping = aes(x = Cases, y = totalCases, color = DateRep)) +
geom_point() +
scale_y_log10(breaks = c(1, 10, 100, 1000, 10000, 100000), limits = c(1, 100000)) +
annotation_logticks(sides="l") +
transition_time(DateRep)
animate(plot)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(COVID)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(data = COVID) +
geom_line(mapping = aes(x = filter(COVID, count == "total"), y = filter(COVID, count == "daily"), group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lr")
ggplot(data = COVID) +
geom_line(mapping = aes(x = filter(COVID, count == "total"), y = filter(COVID, count == "daily"))) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lr")
rlang::last_error()
ggplot(data = COVID) +
geom_point(mapping = aes(x = filter(COVID, count == "total"), y = filter(COVID, count == "daily")))
ggplot(data = COVID) +
geom_point(mapping = aes(x = filter(COVID, count == "total"), y = filter(COVID, count == "daily"), group = geoId))
ggplot(data = COVID) +
geom_point(mapping = aes(x = filter(COVID, count == "total"), y = filter(COVID, count == "daily"), group = geoId))
#
COVID <- rename(COVID, "dailyCases" = "cases")
#
COVID <- rename(COVID, "dailyCases" = "cases")
ID <- unique(COVID$geoId)
COVIDSum <- data.frame()
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$dailyCases)
COVIDSum <- bind_rows(COVIDSum, tempCountry)
}
COVID <- bind_rows(COVID, COVIDSum)
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, group = geoId))
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lr")
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lb")
ggplot(data = COVIDsum) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lb")
ggplot(data = COVIDSum) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lb")
COVID <- COVIDSum
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lb")
install.packages("TTR")
library(TTR)
tempCountry <- SMA(tempCountry, order = 5)
tempCountry <- COVID %>% filter(geoId == ID[4]) %>% arrange(dateRep)
tempCountry <- SMA(tempCountry, order = 5)
tempCountry <- SMA(tempCountry$dateRep, order = 5)
tempCountry <- SMA(tempCountry$dailyCases, order = 5)
tempCountry
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- SMA(tempCountry$dailyCases, order = 5)
tempCountry[, "totalCases"] <- SMA(tempCountry$totalCases, order = 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- SMA(tempCountry$dailyCases, order = 5)
tempCountry[, "totalCases"] <- SMA(tempCountry$totalCases, order = 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- SMA(tempCountry$dailyCases, order = 2)
tempCountry[, "totalCases"] <- SMA(tempCountry$totalCases, order = 2)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
library(data.table)
tempCountry <- COVID %>% filter(geoId == ID[5]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 3)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 3)
tempCountry
tempCountry <- COVID %>% filter(geoId == ID[5]) %>% arrange(dateRep)
tempCountry
source("getCases.R")
COVID <- as_tibble(COVID)
#
COVID <- rename(COVID, "dailyCases" = "cases")
ID <- unique(COVID$geoId)
COVIDSum <- data.frame()
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$dailyCases)
COVIDSum <- bind_rows(COVIDSum, tempCountry)
}
COVID <- COVIDSum
COVIDAvg <- data.frame()
tempCountry <- COVID %>% filter(geoId == ID[5]) %>% arrange(dateRep)
tempCountry
View(tempCountry)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 3)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 3)
source("getCases.R")
COVID <- as_tibble(COVID)
#
COVID <- rename(COVID, "dailyCases" = "cases")
ID <- unique(COVID$geoId)
COVIDSum <- data.frame()
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$dailyCases)
COVIDSum <- bind_rows(COVIDSum, tempCountry)
}
COVID <- COVIDSum
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10(limits = c(10, 20000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(100, 100000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10(limits = c(1, 10000)) +
scale_x_log10(limits = c(1, 100000)) +
annotation_logticks(sides="lb")
COVIDTop <- filter(COVID, totalCases >= 1000)
IDTop <- unique(COVID$geoId)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10(limits = c(1, 10000)) +
scale_x_log10(limits = c(1, 100000)) +
annotation_logticks(sides="lb")
COVID <- filter(COVID, totalCases >= 10)
ggplot(data = COVID) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, group = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb")
COVIDTop <- filter(COVID, totalCases >= 10000)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
COVID <- filter(COVID, totalCases >= 10)
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
library(data.table)
library(ggsci)
library(gganimate)
library(gifski)
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
COVIDTop <- filter(COVID, totalCases >= 1000)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
COVID <- filter(COVID, totalCases >= 10)
loglogPlot <-gplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
loglogPlot <-ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
animate(loglogPlot, renderer = gifski_renderer(loop = F)
)
COVIDTop <- filter(COVID, totalCases >= 500)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
source("getCases.R")
COVID <- as_tibble(COVID)
#
COVID <- rename(COVID, "dailyCases" = "cases")
ID <- unique(COVID$geoId)
COVIDSum <- data.frame()
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$dailyCases)
COVIDSum <- bind_rows(COVIDSum, tempCountry)
}
COVID <- COVIDSum
COVIDTop <- filter(COVID, totalCases >= 1000)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
COVID <- filter(COVID, totalCases >= 10)
COVIDTop <- filter(COVID, totalCases >= 2000)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVIDTop <- filter(COVID, totalCases >= 2500)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
COVID <- filter(COVID, totalCases >= 10)
loglogPlot <-ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
animate(loglogPlot, renderer = gifski_renderer(loop = F))
source("getCases.R")
COVID <- as_tibble(COVID)
#
COVID <- rename(COVID, "dailyCases" = "cases", "dailyDeaths" = "deaths")
ID <- unique(COVID$geoId)
COVIDSum <- data.frame()
for(i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == ID[i]) %>% arrange(dateRep)
tempCountry[, "totalCases"] <- cumsum(tempCountry$dailyCases)
tempCountry[, "totalDeaths"] <- cumsum(tempCountry$dailyDeaths)
COVIDSum <- bind_rows(COVIDSum, tempCountry)
}
COVID <- COVIDSum
COVIDTop <- filter(COVID, totalCases >= 2500)
IDTop <- unique(COVIDTop$geoId)
COVID <- filter(COVID, geoId %in% IDTop)
COVIDAvg <- data.frame()
for (i in 1:length(ID)){
tempCountry <- COVID %>% filter(geoId == IDTop[i]) %>% arrange(dateRep)
tempCountry[, "dailyCases"] <- frollmean(tempCountry$dailyCases, 5)
tempCountry[, "totalCases"] <- frollmean(tempCountry$totalCases, 5)
tempCountry[, "dailyDeaths"] <- frollmean(tempCountry$dailyDeaths, 5)
tempCountry[, "totalDeaths"] <- frollmean(tempCountry$totalDeaths, 5)
COVIDAvg <- bind_rows(COVIDAvg, tempCountry)
}
COVID <- COVIDAvg
COVID <- filter(COVID, totalCases >= 10, totalDeaths >= 10)
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 10000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = totalCases, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = totalCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 10000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = totalCases, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = totalCases, color = geoId)) +
scale_y_log10(limits = c(10, 100000)) +
scale_x_log10(limits = c(10, 10000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
scale_y_log10(limits = c(10, 100000)) +
scale_x_log10(limits = c(10, 10000)) +
annotation_logticks(sides="lb")
ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
scale_y_log10(limits = c(10, 1000)) +
scale_x_log10(limits = c(10, 10000)) +
annotation_logticks(sides="lb")
loglogDeathPlot <- ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
scale_y_log10(limits = c(10, 1000)) +
scale_x_log10(limits = c(10, 10000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
animate(loglogDeathPlot, renderer = gifski_renderer(loop = F))
anim_save("./figures/loglogDeathPlot.gif")
anim_save("../figures/loglogDeathPlot.gif")
animate(loglogDeathPlot, renderer = gifski_renderer(loop = F), end_pause = 30)
anim_save("../figures/loglogDeathPlot.gif", width = 8, height = 8)
animate(loglogCasePlot, renderer = gifski_renderer(loop = F), end_pause = 60, width = 10, height = 7)
loglogCasePlot <- ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
animate(loglogCasePlot, renderer = gifski_renderer(loop = F), end_pause = 60, width = 10, height = 7)
anim(save("../figures/loglogCasePlot.gif"))
anim_save("../figures/loglogCasePlot.gif")
animate(loglogCasePlot, renderer = gifski_renderer(loop = F), end_pause = 60, width = 2400, height = 1800)
anim_save("../figures/loglogCasePlot.gif")
animate(loglogCasePlot, renderer = gifski_renderer(loop = F), end_pause = 60, width = 1200, height = 900)
anim_save("../figures/loglogCasePlot.gif")
loglogCasePlot <- ggplot(data = COVID) +
geom_point(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
geom_line(mapping = aes(x = totalCases, y = dailyCases, color = geoId)) +
scale_y_log10(limits = c(10, 10000)) +
scale_x_log10(limits = c(10, 100000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
animate(loglogCasePlot, renderer = gifski_renderer(loop = F), end_pause = 60, width = 800, height = 600)
anim_save("../figures/loglogCasePlot.gif")
loglogDeathPlot <- ggplot(data = COVID) +
geom_point(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
geom_line(mapping = aes(x = totalDeaths, y = dailyDeaths, color = geoId)) +
scale_y_log10(limits = c(10, 1000)) +
scale_x_log10(limits = c(10, 10000)) +
annotation_logticks(sides="lb") +
transition_reveal(dateRep)
animate(loglogDeathPlot, renderer = gifski_renderer(loop = F), end_pause = 60, width = 800, height = 600)
anim_save("../figures/loglogDeathPlot.gif", width = 8, height = 8)
